* shed
:PROPERTIES:
:ID: 205131fc-ff48-4e0b-a3e8-ab52d5b6ca19
:CATEGORY: bin
:END:
multi-development tool
+ status :: ALPHA
+ [[src:shed][source]] :: 
+ version :: 0.0.1
** Abstract
:PROPERTIES:
:ID:       0093b08d-ee3f-44aa-9683-8317eafde9c0
:END:
=shed= is a software development tool.

** Features
:PROPERTIES:
:ID:       83a9750a-bb30-4272-b1f3-23d85806cbb8
:END:
- Mercurial VCS
   - Pullbundles and Clonebundles
   - Subrepos
   - HTTP client/server
   - Git import/export
- Build tool wrappers (=cargo=, =clang=, =Makefile=, =scripts=)
- Template integration with =babel= for files and projects
- Packaging
- Fully configurable via RON or JSON files

** Usage
:PROPERTIES:
:ID:       ecb7c923-6329-4e13-af72-84482bdbcb1e
:END:
Once the binary is installed run =shed init= to bootstrap a
=Config= via CLI prompts or download one remotely. A user
configuration file needs to be available and accessible by the current
user. The default config path is determined by the ~$SHED_CFG~
environment variable or =./cfg.ron= as a fallback.
*** Configuration
:PROPERTIES:
:ID:       0fa1c99b-6452-4b60-be05-6801803600cf
:END:
Global configuration is controlled by the =Config= type (=RON=, =JSON=
or =bincode= file). The specification is non-exhaustive and can be
extended by the user.

#+begin_src ron
// cfg.ron
#![enable(implicit_some)]
(
  path: "/home/ellis/.config/shed.ron",
  owner: "ellis",
  src: [],
  network: (
    socket: "127.0.0.1:0",
    transport: "udp",
    tunnel: None,
    engine: None,
    peers: None,
  ),
  hgrc: (
    name: "",
    contact: "",
    description: "",
    extensions: [],
    sock: "0.0.0.0:0",
    paths: {},
  ),
)
#+end_src
*** Commands
:PROPERTIES:
:ID:       a0f0f72d-475a-49a1-a21f-5d8a604099fd
:END:
- serve :: serve a *Collection* over HTTP[fn:3]
- stash :: add/remove objects in the *stash*
- store :: add/remove objects in the *store*
#+begin_src shell :export results
shed --help
#+end_src

#+RESULTS:
shed 0.1.0-ff45bc34c9f6+

ellis <ellis@rwest.io>

shed ← tool≍⌜⍋box

USAGE:
    shed [OPTIONS] [SUBCOMMAND]

FLAGS:
    -h, --help       Print help information
    -V, --version    Print version information

OPTIONS:
    -c, --config <RON|JSON|BIN>    override configuration values

SUBCOMMANDS:
    build     build scripts
    clean     clean stuff up
    edit      edit all the things
    help      Print this message or the help of the given subcommand(s)
    init      initialize the shed
    krypt     blackbox
    pack      create packages from file or directory
    pull      fetch resources
    push      commit changes to upstream
    serve     network services
    stash     local storage
    status    print basic info
    store     shared block storage
    unpack    unpack .zst or .tz files
    x         do things with runtimes

** Footnotes
:PROPERTIES:
:ID:       eabd06fd-762c-43ef-b8bd-a4d3683ea1c4
:END:

[fn:1]  =shed= is not based on a single concrete type like a
=package=, and fully encompasses the =lab= project management tool
initially introduced.

[fn:2] =rlib= on the other hand, is very similar to =rust-shed= and
other crates Facebook has open-sourced such as [[https://github.com/facebookincubator/gazebo][gazebo]].

[fn:3] will support TLS, and eventually migrate to QUIC

