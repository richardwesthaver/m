#+TITLE: metas
#+SETUPFILE: ox.setup
#+ID: f34c081a-6e12-4a64-af63-eafd3603bd1a
#+CUSTOM_ID: metas
#+CATEGORY: metas
* meta
:PROPERTIES:
:ID:       60bed781-3a70-4435-9df0-097b799539e4
:END:
+ what -- docs
+ why -- knowledge is power
+ status -- ALPHA
+ [[src:meta][src]] <-

This project contains documents I've written in plain-text which are
used to generate my [[https://rwest.io][website]] and readmes.
- =m.org= contains formal docs for projects
- =n.org= contains informal notes
- =cv.org= is my resume (hire me!)

** Elements
:PROPERTIES:
:ID:       93185ce3-7b16-4f9b-8e59-39127869ac45
:END:
The source files assume some familiarity with org syntax. Org syntax
is covered [[https://orgmode.org/worg/dev/org-syntax.html][online]] in detail and high-level info about document
structure can be found in the [[info:emacs#Top][Emacs manual]].

All docs are fully compliant with org, with the addition of some
special *elements*:

- props ::
  All nodes have an optional number of "props" which are denoted as a
  list item that uses =+= followed by the prop symbol and an
  `edge` (=--=, =<-=, =->=). These can appear anywhere in the =section= element of a node
  (not just immediately following properties drawer). They're like a
  shorthand for custom properties.
- drawers ::
  Org-mode has a feature called drawers, which are collapsible
  sections of text starting with =:DRAWER_NAME:= and ending with
  =:END:=. The most common one seen in our docs is the PROPERTIES
  drawer, but there are a few special ones we use, especially in
  =n.org=: =note=, =opinion=, and =boris=.
- links ::
  In addition to the default links, we use a few custom links, most
  notably =yt= which embeds a video from youtube.
  :note:
  This is not good for users, since the embedded youtube links include
  tracking and other nasty bits from Google. In the future these links
  will be migrated to =cdn= to avoid that, increasing user privacy and
  greatly improving page load time.
  :end:
  =cdn=, =src=, and =rw= links all point to =rwest.io=.
** Build
:PROPERTIES:
:ID:       d0e37437-8959-4692-9b7f-9245073042e2
:END:
- Emacs has many backends for [[https://orgmode.org/manual/Exporting.html][exporting]] powered by [[https://orgmode.org/worg/exporters/ox-docstrings.html][ox.el]] - an
  emacs-lisp script is all that is needed to generate conventional
  formats like HTML.
- A list of publishing templates are defined to export individual
  modules or output formats.
- Each format is generated in a separate temporary directory
- While the elisp script is chugging along, some pre-processing occurs
  which parses the org files and creates an intermediate
  representation for ingestion by internal services.
- Compression and archiving is also performed to generate =.tz=
  (tar.zst) archives for each format.
- all build artifacts are transferred over SSH to a public web server
- New content can now be viewed online at [[https://rwest.io][rwest.io]] and downloaded at
  [[https://rwest.io/x][rwest.io/x]] which includes archives and individual files in all
  formats.
*** makefile
:PROPERTIES:
:ID:       c27a67be-7b8b-47c5-9578-5acc71e27c53
:header-args: :results silent :eval no-export
:END:
#+begin_src makefile :tangle makefile :shebang "#!/usr/bin/make -f -j8"
PUB := ./pub.el
OX_SETUP := ./ox.setup

HD ?= dmz
P ?= html md txt pdf org

MD = mkdir -p $(@)

.PHONY: c

o:o/x;shed pack $< $<.tz;
	$(foreach p,$(P), shed pack $</${p} $@/${p}.tz;)

w:o;ssh $(HD) rm -rf dmz/w/*.html;\
	scp -r $</x/html/*.html $(HD):dmz/w;\
	scp -r $</*.tz $(HD):dmz/w/x

c:;rm -rf o

o/x:$(OX_SETUP) $(PUB);$(MD)/org;cp ./*.org $< o/x/org;$(PUB);\
	ssh $(HD) rm -rf dmz/w/*.html; scp -r $@/html/*.html $(HD):dmz/w/;\
	shed pack $@ o/x.tz;scp -r $@ $(HD):dmz/w
  #+end_src
*** pub.el
:PROPERTIES:
:ID:       e350dd4f-eab2-477b-9ce7-c39e4e4d75e0
:END:
#+name: meta_publish
#+begin_src elisp :tangle pub.el :shebang "#!/usr/local/bin/emacs --script" :var ox_meta="html" :results silent
(require 'htmlize "~/shed/src/contrib/el/htmlize/htmlize.el")
(require 'ox-publish)
(require 'ox-latex)
(require 'ox-man)
(require 'ox-html)
(require 'cl-lib)
(require 'ox-ascii)
(require 'org-id)

(setq org-html-head-include-default-style nil)

(setq org-publish-project-alist
      '(("org-html"
         :author "ellis"
         :email "ellis@rwest.io"
	 :base-directory "~/shed/src/meta/o/x/org"
	 :base-extension "org"
         :with-date (current-time)
	 :publishing-directory "~/shed/src/meta/o/x/html"
	 :publishing-function org-html-publish-to-html
	 :auto-sitemap nil)
        ("org-md"
         :author "ellis"
         :email "ellis@rwest.io"
	 :base-directory "~/shed/src/meta/o/x/org"
	 :base-extension "org"
         :with-date (current-time)
	 :publishing-directory "~/shed/src/meta/o/x/md"
	 :recursive t
	 :publishing-function org-md-publish-to-md
	 :auto-sitemap nil)
        ("org-man"
         :author "ellis"
         :email "ellis@rwest.io"
	 :base-directory "~/shed/src/meta/o/x/org"
	 :base-extension "org"
         :with-date (current-time)
	 :publishing-directory "~/shed/src/meta/o/x/man"
	 :recursive t
	 :publishing-function org-man-export-to-man
	 :auto-sitemap nil)
        ("org-pdf"
         :author "ellis"
         :email "ellis@rwest.io"
	 :base-directory "~/shed/src/meta/o/x/org"
	 :base-extension "org"
         :with-date (current-time)
	 :publishing-directory "~/shed/src/meta/o/x/pdf"
	 :recursive t
	 :publishing-function org-latex-publish-to-pdf
	 :auto-sitemap nil)
        ("org-txt"
         :author "ellis"
         :email "ellis@rwest.io"
	 :base-directory "~/shed/src/meta/o/x/org"
	 :base-extension "org"
         :with-date (current-time)
	 :publishing-directory "~/shed/src/meta/o/x/txt"
	 :recursive t
	 :publishing-function org-ascii-publish-to-ascii
	 :auto-sitemap nil)
	("all" :components ("org-html" "org-md" "org-pdf" "org-txt"))))

(setq org-link-abbrev-alist
      '(("google"    . "http://www.google.com/search?q=")
        ("gmap"      . "http://maps.google.com/maps?q=%s")
        ("omap"      . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")
        ("ads"       . "https://ui.adsabs.harvard.edu/search/q=%20author%3A\"%s\"")
	    ("rw" . "https://rwest.io/%s")
        ("src" . "https://hg.rwest.io/%s")
        ("contrib" . "https://hg.rwest.io/contrib/%s")
        ("cdn" . "https://rwest.io/a/%s")))

(defvar yt-iframe-format
  (concat "<iframe width=\"480\""
          " height=\"360\""
          " src=\"https://www.youtube.com/embed/%s\""
          " frameborder=\"0\""
          " allowfullscreen>%s</iframe>"))

(org-add-link-type
 "yt"
 (lambda (handle)
   (browse-url
    (concat "https://www.youtube.com/embed/"
            handle)))
 (lambda (path desc backend)
   (cl-case backend
     (html (format yt-iframe-format
                   path (or desc "")))
     (latex (format "\href{%s}{%s}"
                    path (or desc "video"))))))

(org-publish-remove-all-timestamps)
(org-refile-cache-clear)
(org-publish ox_meta t t)
  #+end_src
* babel
:PROPERTIES:
:ID:       1b363810-26ea-4dae-b689-6e050756bfae
:CATEGORY: lib
:END:
+ what ← scripts[sc], snippets[sn], and templates[tm]
+ status ← IN_PROGRESS
+ [[src:babel][src]] ⇐ 

Re-using code is an important part of software development. We re-use
code when importing a library module, using macros, writing classes,
and [[https://stackoverflow.blog/2021/04/19/how-often-do-people-actually-copy-and-paste-from-stack-overflow-now-we-know/][copying code from Stack Overflow]]. As such, programmers have often
come up with systems for collecting code that they can re-use in other
contexts.

=babel= is one of these systems. It is highly integrated with [[id:205131fc-ff48-4e0b-a3e8-ab52d5b6ca19][shed]] and
[[id:903f8087-e0af-48f2-a5a6-f8d7f080464a][GNU Emacs]] which are used to modify, organize, and implement our
collections.

Collections are described by three categories:
- sn :: common domain-specific code snippets
- sc :: generalized scripts in a variety of languages
- tm :: project templates

Each category provides its own methods of interaction available to the
user for different types of meta-programming activities. There are
also high-level interfaces for composing ephemerial hacking sessions
and configuration.

This project is an extension of the [[https://orgmode.org/manual/Library-of-Babel.html][Library of Babel]] - which allows
you to define blocks of code in an org file, and call them
remotely. =babel= is in fact just this - a collection of code blocks
in an org file. Emacs was previously distributed with an initial
collection; [[https://git.sr.ht/~bzg/worg/tree/master/item/library-of-babel.org][library-of-babel.org]]. This is no longer the case, but the
powerful functionality of =org-babel= is still there, in all its
glory.

The goal of =babel= however is not just to build collections, but to
provide APIs for them. As such a large focus of this project will be
on exporting (i.e. [[id:b297c4d5-9d42-4618-9ab6-e8134d7587a0][Weaving and Tangling]]) and parsing collections built in Emacs so that they can
be used by other processes. Our intention is to mimick the powerful
meta-programming capabilities of =org-babel= (specifically, the
ability to mix and match functions /from any language/) in a
user-defined runtime.

** Weaving and Tangling
:PROPERTIES:
:ID:       b297c4d5-9d42-4618-9ab6-e8134d7587a0
:END:
[[cdn:img/literate_c.jpg]]

Weaving and Tangling are two types of operations that are performed on
some raw source, which should include both prose and code. The raw
source is =org= in our case, but the same applies elsewhere.

- *Weaving* is associated with the /publishing/ and /exporting/
  pipeline for the source, which is meant to enhance the
  human-readable aspects.

- *Tangling* is associated with the /compilation/ and /build/ pipeline
  for source. It creates machine-friendly artifacts which can be
  distributed for use by tools and services.

The framework itself is quite 'Emacs-y' in nature. It follows the same
self-documenting philosophy. Other examples that come to mind are
Jupyter notebooks and to a lesser extent Rust docs. The concept can be
applied widely but is typically reserved for the domains of
Academia/Research.

** Dependencies
:PROPERTIES:
:ID:       b3146122-3109-45ce-b155-97d52701a0ca
:END:
- *Emacs 28* \\
  The editor integration doesn't depend on any external packages
  outside of vanilla Emacs. The following built-in packages are used
  to provide functionality:
  - =org.el=
  - =ob.el=
  - =skeleton.el=
  - =autoinsert.el=
  - =abbrev.el=
  - =dabbrev.el=
  All of the above features should be available in the default Emacs
  distribution for your OS.
- *GNU Make* \\
  =optional=
  
** Example
:PROPERTIES:
:ID:       d46704c3-829b-4f46-b487-915ed5304638
:END:
* cfg
:PROPERTIES:
:ID:       9d7999d3-b66e-4ea2-8586-2ef9c27e8f4b
:END:
+ what -> my config files
  - emacs
  - mail
  - shell
  - term
  - tmux
  - vc
  - virt
  - wm

I have a relatively small set of config files, but they get a lot
done. The sections below cover configuration of a certain category or
individual application such as =shell= or =emacs= respectively.

The top-level makefile is used for basic deployment and publishing,
but these files are generally intended to be loaded into a user
environment via the =shed= development tool.
** emacs
:PROPERTIES:
:ID:       903f8087-e0af-48f2-a5a6-f8d7f080464a
:END:
+ what -- Configuration for the superior editor.
+ version -- 2.1
*** Abstract
:PROPERTIES:
:ID:       937b83dd-233b-44cb-9a0b-d5536f7d9db3
:END:
I've been using Emacs since 2016 as my primary editor. I started with
Spacemacs, used Doom for a while, then started rolling my own
configurations. Configuring the Emacs editor requires learning the
Emacs language - emacs-lisp. It is a dialect of Common Lisp which can
be a bit tricky to adapt to for non-Lisp programmers, but it is built
specifically for Emacs.

This meta covers my Emacs modules, configurations, scripts, and other
code written in emacs-lisp. I have a main configuration which is
thousands of lines, but lately I've been experimenting with running
multiple smaller isolated emacs servers, with their own unique
configs.
*** config.org
:PROPERTIES:
:ID:       6782d0a9-1915-4b3e-85fb-3dd5e7ec917e
:END:
The (old) main configuration file. A lot of this is getting moved to
our =notes=. The resulting files will be refactored. Despite being
messy, it's still very effective (see [[id:005d2a6e-d34f-45ee-a169-f26fc264c916][Screenshots]]).
*** Screenshots
:PROPERTIES:
:ID:       005d2a6e-d34f-45ee-a169-f26fc264c916
:END:
  - themes \\
    #+attr_html: :width 600
    #+attr_latex: :width 600
    [[https://rwest.io/a/img/abyss-theme-emacs.png][https://rwest.io/a/img/abyss-theme-emacs.png]]
    #+attr_html: :width 600
    #+attr_latex: :width 600
    [[https://rwest.io/a/img/sanityinc-theme-emacs.png][https://rwest.io/a/img/sanityinc-theme-emacs.png]]
    #+attr_html: :width 600
    #+attr_latex: :width 600
    [[https://rwest.io/a/img/wheatgrass-theme-emacs.png][https://rwest.io/a/img/wheatgrass-theme-emacs.png]]
    #+attr_html: :width 600
    #+attr_latex: :width 600
    [[https://rwest.io/a/img/leuven-theme-emacs.png][https://rwest.io/a/img/leuven-theme-emacs.png]]
  - org-mode \\
    #+attr_html: :width 600
    #+attr_latex: :width 600
    [[https://rwest.io/a/img/olivetti-emacs.png][https://rwest.io/a/img/olivetti-emacs.png]]
  - programming \\
    #+attr_html: :width 600
    #+attr_latex: :width 600
    [[https://rwest.io/a/img/rust-development-emacs.png][https://rwest.io/a/img/rust-development-emacs.png]]
    #+attr_html: :width 600
    #+attr_latex: :width 600
    [[https://rwest.io/a/img/rust-tests-emacs.png][https://rwest.io/a/img/rust-tests-emacs.png]]
  - email \\
    #+attr_html: :width 600
    #+attr_latex: :width 600
    [[https://rwest.io/a/img/email-emacs.png][https://rwest.io/a/img/email-emacs.png]]
  - eww \\
    The Emacs Web Wowser
    #+attr_html: :width 600
    #+attr_latex: :width 600
    [[https://rwest.io/a/img/eww-emacs.png][https://rwest.io/a/img/eww-emacs.png]]
** mail
:PROPERTIES:
:ID:       f3d16b98-d848-46a4-a7a6-fc6014ebef76
:END:
+ what -- mail configs
  - notmuch
  - offlineimap
** shell
:PROPERTIES:
:ID:       217423f6-ab17-457a-a35c-04678d4b71c3
:END:
+ what -- shell configs
  - bash
  - zsh
** term
:PROPERTIES:
:ID:       4c4a3209-a71c-4f94-9900-c1fd50f9b186
:END:
+ what -- terminal emulator configs
  - kitty
** tmux
:PROPERTIES:
:ID:       33726d69-2c43-453e-808e-78cfb126dc05
:END:
+ what -- tmux config
** vc
:PROPERTIES:
:ID:       f8ce8509-e360-4d1c-936f-37aae0537684
:END:
+ what -- Version Control configs
  - mercurial
  - git
** virt
:PROPERTIES:
:ID:       c240a030-7e6b-4061-8c13-a5764169eb35
:END:
+ what -- virtual machine and container configs
  - lxd | lxc
** wm
:PROPERTIES:
:ID:       3eafb844-4684-48af-ac2b-4660df2c2ab4
:END:
+ what -- X11 configs
  - 2bwm
  - conky
  - lemonbar
** nix                                                 :deprecated:noexport:
:PROPERTIES:
:ID:       e2f62a1e-8f54-4bf6-ab88-86872e49f71d
:END:
Poorman's distributed =nix= config has fallen into disrepair, but I
keep it around for old-time's sake. It might come in handy in the
future, depending on how the Nix ecosystem progresses.
* shed                                                                 :rust:
:PROPERTIES:
:ID: 205131fc-ff48-4e0b-a3e8-ab52d5b6ca19
:CATEGORY: bin
:END:
+ what -- An opinionated, CLI-based IDE
+ why -> escape the Cloud
  - It is clear that the future of organized web development is
    embedded in the Cloud.
    - Github, AWS, Google Cloud, Azure.. are all excellent
      tools.
    - These services become a core part of your deployment pipeline,
      many of them are quite complex. The features you use are likely
      to be based on a subscription (monthly/yearly fee),
      pay-as-you-go model (/Gb, /Hr), or even through a third-party
      extension (/gasp/).
    - These factors lead to a new level of meta-programming in which
      you create hacks to support your workflow, reduce costs, and
      integrate with your internal infrastructure. This is the 10th
      circle of Hell in which engineers and network specialists need
      to Read The Docs and become subject matter experts themselves.
  - Is there a better way?
    - For conventional orgs, probably not.
    - For the one-man army or isolated tribe of hackers.. perhaps.
      - Build it yourself!
      - Own your data.
      - Develop in distributed silos or 'labs'.
      - Self-host services.
+ status -- ALPHA
+ version -- 0.0.1
+ [[src:shed][src]] <-
+ [[https://docs.rwest.io/shed][docs]] <-

** Overview
:PROPERTIES:
:ID:       0093b08d-ee3f-44aa-9683-8317eafde9c0
:END:
This tool is intended to encapsulate and optimize my full development
workflow. The idea is that I can install this tool on any development
machine, and with a single command (=shed init=) bootstrap a
custom-tailored workspace.

** Roadmap
:PROPERTIES:
:ID:       169e6a06-9260-4f12-95de-aeb2afa17fd1
:END:
*** NEXT Registry
:PROPERTIES:
:ID:       b157b0bd-da91-4f0a-925f-39acfed569a7
:END:
:LOGBOOK:
- State "NEXT"       from              [2021-10-23 Sat 03:38]
:END:

*** HACK Commands
:LOGBOOK:
- State "HACK"       from "TODO"       [2021-10-23 Sat 03:41]
- State "TODO"       from              [2021-10-23 Sat 03:38]
:END:

*** TODO Krypt
:LOGBOOK:
- State "TODO"       from              [2021-10-23 Sat 03:38]
:END:

*** TODO Babel
:LOGBOOK:
- State "TODO"       from              [2021-10-23 Sat 03:43]
:END:

*** TODO shed.el
:LOGBOOK:
- State "TODO"       from              [2021-10-23 Sat 03:39]
:END:

** Features
:PROPERTIES:
:ID:       83a9750a-bb30-4272-b1f3-23d85806cbb8
:END:
- *Src*
  - Mercurial VCS
    - Bundle support
    - HTTP client/server
    - Git import/export
  - Build tools (=cargo=, =clang=, =Makefile=, =scripts=)
- *X*
  - programming environments (REPLs)
    - embedded Python (RustPython)
    - APLs (BQN, k6/9, Gnu/Dyalog APL)
    - Elisp (ielm.el)
    - Erlang (erl)
    - Lua
- *Babel*
  - File templates
  - scripts and snippets
  - meta-programming primitives
- *Stash*
  - temp storage (=tmp=)
  - music library (=music=)
  - configs (=cfg=)
  - library of babel (=babel=)
  - tasks, journal, inbox, ops (=org=)
- *Store*
  - archive (=arch=)
  - data (=data=)
  - media (=media=)
    - audio (=aud=)
    - video (=vid=)
  - virt (=virt=)
    - OS images (=img=)
    - FS images (=fs=)
- *Lab*
  - Virtual system management (=lxd= and =qemu=)
    - configurable fs and network sharing for guests
  - Bootstrap =babel= projects, use local data from =stash= and
    =store=
- *Krypt*
  - reasonably safe secret storage
    - Wireguard, SSH, TLS, plaintext
  - isolated access to OAuth2 and JWT authenticated API services
    - Google, AWS, Discord, Github
** Installation
:PROPERTIES:
:ID:       803d215d-18da-499b-a2fd-01e15a152e13
:END:
** Usage
:PROPERTIES:
:ID:       ecb7c923-6329-4e13-af72-84482bdbcb1e
:END:
Once the binary is installed run =shed init -p= to bootstrap a
=Config= via prompts. The default config path is determined by the
~$SHED_CFG~ environment variable or ~$HOME/.config/shed.cfg~ by
default.

Some commands run just fine without writing a config to disk - A
default configuration is supplied when =shed.cfg= can't be
found. Other commands may panic in the event that a system or internal
path dependency is missing.

*** Configuration
:PROPERTIES:
:ID:       0fa1c99b-6452-4b60-be05-6801803600cf
:END:
Global configuration is controlled by the =Config= type (=RON=, =JSON=
or =bincode= file). The specification is non-exhaustive and can be
extended by the user.

#+begin_src ron
// cfg.ron
#![enable(implicit_some)]
(
  path: "/home/ellis/.config/shed.ron",
  owner: "ellis",
  src: [],
  network: (
    socket: "127.0.0.1:0",
    transport: "udp",
    tunnel: None,
    engine: None,
    peers: None,
  ),
  hgrc: (
    name: "",
    contact: "",
    description: "",
    extensions: [],
    sock: "0.0.0.0:0",
    paths: {},
  ),
)
#+end_src
*** Commands
:PROPERTIES:
:ID:       a0f0f72d-475a-49a1-a21f-5d8a604099fd
:END:
#+begin_src shell :exports both :results output replace
shed --help
#+end_src

#+RESULTS:
#+begin_example
shed 0.1.0-0fc01f4e2590+

ellis <ellis@rwest.io>

shed multi-development tool

USAGE:
    shed [FLAGS] [OPTIONS] [SUBCOMMAND]

FLAGS:
    -?               set the log level
    -h, --help       Print help information
    -V, --version    Print version information

OPTIONS:
    -c, --config <RON|JSON|BIN>    override configuration values

SUBCOMMANDS:
    build       build scripts
    clean       clean stuff up
    download    fetch resources
    edit        edit all the things
    help        Print this message or the help of the given subcommand(s)
    init        initialize the shed
    krypt       blackbox
    pack        create packages from file or directory
    pull        fetch resources
    push        commit changes to upstream
    serve       network services
    stash       local storage
    status      print basic info
    store       shared block storage
    unpack      unpack .z or .tz files
    x           do things with runtimes
#+end_example

* rlib                                                                 :rust:
:PROPERTIES:
:ID: 7e0d54ee-d3f7-468a-b0cf-664bba4df675
:CATEGORY: lib
:END:
+ what ⇐ a Rust system library
+ why ⇐ develop next-gen applications and services
+ how ⇐ a common interface for low-level modules
+ status ⇐ EXPERIMENTAL
+ [[src:rlib][src]] ⇐
+ [[https://docs.rwest.io/rlib][docs]] ⇐
** Usage
:PROPERTIES:
:ID:       89920d82-42dd-402c-8eb7-efdcc71007e5
:END:
This crate is not (yet) published on crates.io. To get started you'll need
to clone the [[src:rlib][repo]] and add it as a dependency to your project like so:
#+begin_src toml
[package]
name = "foo"
#...
[dependencies]
rlib = { version = "0.1.0", path = "../rlib", features = ["cli","kala","anyhow"]} #include some features
#+end_src

then just use the modules in your code:
#+begin_src rust
use rlib::{ctx, logger, kala};
use rlib::util::Result;
#[ctx::main]
async fn main() -> Result<()> {
  logger::flexi("debug")?;
  println!("greetings stranger!");
  kala::cmd::sys::describe_host();
  Ok(())
}
#+end_src

Once our local cargo package registry is complete, instructions will
be included for how to use this crate from within a =shed= development
environment.

** Crates
:PROPERTIES:
:ID:       bb740861-e7b9-4730-bd34-622f7ae53ce8
:END:

=rlib= is split into separate crates with a single [[https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html][workspace]]
library.

- obj
  - [[https://docs.rwest.io/rlib/doc/obj][API docs]]
  =Objects= are pre-defined Rust structs that can easily encode to RON,
  JSON or Bincode, and tagged with metadata such as an =Id=, for easy
  indexing. They implement a few traits, namely =Objective= and
  =Identity= which define common functions.

  Objects can be initialized using the =Objective= methods, which allows
  all fields in their type definition to be decoded from JSON, RON, or
  bincode. Some Objects also provide methods used to parse the
  underlying type itself, such as =Wav= for .wav audio files and =Org=
  for .org text files.
- ctx
  - [[https://docs.rwest.io/rlib/doc/ctx][API docs]]
  Async runtime context(s).
- eve
  - [[https://docs.rwest.io/rlib/doc/eve][API docs]]
  Async event queue (io_uring). Linux only and very experimental
- net
  - [[https://docs.rwest.io/rlib/doc/net][API docs]]
  Network modules for building clients/servers.
- db
  - [[https://docs.rwest.io/rlib/doc/db][API docs]]
  Database modules
- alch
  - [[https://docs.rwest.io/rlib/doc/alch][API docs]]
  Allocator implementations for the niche.
- hash
  - [[https://docs.rwest.io/rlib/doc/hash][API docs]]
  Hash algorithms. (re-exported in =crypto= too)
- logger
  - [[https://docs.rwest.io/rlib/doc/logger][API docs]]
  Logging essentials including a runtime context and macros from the =log= crate
- math
  - [[https://docs.rwest.io/rlib/doc/math][API docs]]
  TBD
- flate
  - [[https://docs.rwest.io/rlib/doc/flate][API docs]]
  Compression module swiss-army knife built around =zstd=.
- crypto
  Crypto /primitives/.
  - [[https://ed25519.cr.yp.to/][ed25519]] and [[https://github.com/dalek-cryptography/ed25519-dalek][ed25519-dalek]] public-key signatures
  - [[https://cr.yp.to/snuffle.html][Salsa20]] stream cipher + [[https://cr.yp.to/snuffle/xsalsa-20081128.pdf][XSalsa20]]
  - [[https://nacl.cr.yp.to/secretbox.html][NaCl]] (TBD)
  - [[https://docs.rwest.io/rlib/doc/crypto][API docs]]
- audio
  - [[https://docs.rwest.io/rlib/doc/audio][API docs]]
  Cross-platform audio device detection and playback.
- kala
  Handy /offline/ functions.
  - [[https://docs.rwest.io/rlib/doc/kala][API docs]]
- dmc
  TBD
  - [[https://docs.rwest.io/rlib/doc/dmc][API docs]]
- dts
  - [[https://docs.rwest.io/rlib/doc/dts][API docs]]
  Experimental types (Monads and GATs and such)
- ui
  - [[https://docs.rwest.io/rlib/doc/ui][API docs]]
  TBD
- util
  - [[https://docs.rwest.io/rlib/doc/util][API docs]]
  Utilities and development tools designed to reduce boilerplate code
  for build scripts and binaries. Includes wrappers for =anyhow=,
  =clap=, =chrono=, and some other useful things.

* tenex                                                                :rust:
:PROPERTIES:
:ID: 0480aced-777f-4f30-ae05-189500fb6903
:CATEGORY: lib
:END:
+ what -> A Rust HTTP Client library
  - ergonomic wrappers for foreign APIs
  - features -> {google, AWS, discord, openAI, ipapi, NWS}
+ why -> isolation of vendor-specific network calls
  - apps ->
    - cloud management tools (google_drive, gmail, EC2, discord_bots)
    - basic API requests (IP_info, weather_forecast[US only])
    - async task pools (cross_API_chaining, chatbots_with_triggers, deployment_pipelines)
    - FFI (WASM/Python/C)
+ status -- ALPHA
+ [[src:tenex][src]] <-
+ [[https://docs.rwest.io/tenex][docs]] <-
** Features
:PROPERTIES:
:ID:       81958264-5117-4120-9be7-5493c5ae14b8
:END:
- Clients
   - [X] NWS (US Weather)
   - [X] ipapi (public IP lookup)
   - [ ] openai (beta API)
   - [ ] Google Cloud
   - [ ] AWS
   - [X] SMTPS (smtp.gmail.com)
- [ ] Authentication
   - [ ] JWT
   - [ ] OAuth

* demo                                                                 :rust:
:PROPERTIES:
:ID: cbe16e7d-6d73-4e34-a0fc-13a34abe65ba
:CATEGORY: bin
:END:
+ what -- demos and examples relating to [[id:7e0d54ee-d3f7-468a-b0cf-664bba4df675][rlib]] and [[id:0480aced-777f-4f30-ae05-189500fb6903][tenex]].
+ status -- ALPHA
+ [[src:demo][src]] <-
** Examples
:PROPERTIES:
:ID:       04580557-8e76-49b6-ad36-731464a527dd
:END:
*** hgsub-sort.rs
:PROPERTIES:
:ID:       c313a484-e72b-4f41-b9ab-44c3d69727c1
:END:
Sorts a Mercurial Subrepos file (=.hgsub=) alphabetically.
*** hi.rs
:PROPERTIES:
:ID:       01bf673a-4179-43bc-9281-00d01be97bfd
:END:
A startup script I run after logging in to my desktop. It does a few things:
- print my public IP
- print a weather report
- print list of connected USB devices
- build a tmux session and attach to it (Unix only + =tmux=)
- configure desktop displays with xrandr (Linux only + =x11=)
- spawn some desktop widgets (Linux only + =conky=)
- set my desktop background (Linux only + =fehbg=)

Conditional compilation flags are used - so this program will only
print IP, weather, and USB devices on Windows.
#+attr_html: :width 600
#+attr_latex: :width 600
[[https://rwest.io/a/img/hi-windows-demo.png][https://rwest.io/a/img/hi-windows-demo.png]]

*** wg-keygen.rs
:PROPERTIES:
:ID:       0cfaf940-b3d9-4566-bbbf-8c19ea556d14
:END:

*** chatter
:PROPERTIES:
:ID:       d61ebbcc-5154-4616-8c37-fbf836493030
:END:
OpenAI API examples (NOTE: requires an OpenAI beta access key)

* contrib
:PROPERTIES:
:ID:       23172369-1d5e-425c-8ffb-78a152c28670
:END:
+ what -- Third-party code and dependencies with mirrored source trees
+ why -- isolation of external dependencies
+ [[src:contrib][src]]
* crater
:PROPERTIES:
:ID:       39a1d49f-b477-4e19-8b54-d223168c5703
:END:
+ what -- a private crate registry for the Rust programming language.
+ [[src:crater][src]]
The [[https://crates.io][crates.io]] package registry provides a number of excellent crates,
integrates well with the =cargo= development tool, and should be
preferred in all cases. I use =crater= when I need to:
- import my unpublished crates
- import the master branch of a published crate
- import a local or patched version of a published crate
- import a non-git crate (hg)

=crater= also works well in intranet/local environments, and can be
deployed for use in the following ways:
- remote :: same as crates.io, registry index is publicly hosted on GitHub (default)
- local :: registry index is stored locally, crates are retrieved remotely
- static :: registry index and crate sources are stored locally, no
  network requests are required

* music
:PROPERTIES:
:ID: 29e8cd23-f49c-47a8-b685-e96b3fbe36e3
:CATEGORY: art
:CUSTOM_ID: 0d9fdd16-0e05-4835-a7de-9e2545b41221
:END:
I make music sometimes, because I enjoy the process. There are so many
things to appreciate in sound and it's easy to let yourself become
absorbed.

Most of the time I just jam with my synths and drum machines and hit
the record button. It's a good time.
- [[https://soundcloud.com/ellisaudio][soundcloud1]] | [[https://soundcloud.com/2pldn][soundcloud2]]
- [[https://cdn.rwest.io/media/audio][audio loops]] \\
  I have a bunch of loops and other soundbytes I've created over the
  years - they're all in an Ableton project so that I can mix and
  arrange them for on-the-fly jam seshes.
- keyboard clips
   - [[https://cdn.rwest.io/media/video/joined_video_971d629fa80c4660b1e8b8abf89b1015.mp4][light rhodes jam]]
   - [[https://cdn.rwest.io/media/video/20170704_204759_1.mp4][electro rhodes jam]]
   - [[https://cdn.rwest.io/media/video/20170706_213623.mp4][classical practice]]
     working out Resignation by Brad Mehldau
- [[https://cdn.rwest.io/media/video/shader_example.mp4][Main Thing (Remix) shader demo]]
  GLSL shader in Max/MSP + House Music

** computer_music
:PROPERTIES:
:ID:       de3060ce-5d70-486e-bd54-caf6be79f034
:END:
- I'm slowly preparing some tools for music composition, now that the
  RustAudio ecosystem is approaching maturity.
- cool things are on their way, and I'm excited to be getting back
  into the creative flow.
- possibilities:
  - MIDI server for analog hardware
  - OSC server for Max/MSP, PureData, SuperCollider integrations
  - Multi-track arrangement, recording, and mixing
  - sample-level DSP with Oscillators, Effects, and Synth Engines
