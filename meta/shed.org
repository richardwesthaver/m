* shed
:PROPERTIES:
:ID: 205131fc-ff48-4e0b-a3e8-ab52d5b6ca19
:CATEGORY: bin
:END:
=shed= is a set of tools and services for software development. It
provides version control, package distribution, project templates,
scripts, and everything else I need to get stuff done.

Global configuration is controlled by the =Config= type (=RON= or
=JSON= file). The specification is non-exhaustive and can be extended
by the user.

** Status
   *IN PROGRESS*
  - this doesn't work quite yet
  - some features are available, but disjointed

** Features
- Mercurial VCS
   - Pullbundles and Clonebundles
   - Subrepos
   - HTTP client/server
   - Git import/export
- Build tool wrappers (=cargo=, =clang=, =Makefile=, =scripts=)
- Template integration with =babel= for files and projects
- Packaging
- Fully configurable via RON or JSON files

** Abstract
The name =shed= was originally derived from [[https://github.com/facebookexperimental/rust-shed][rust-shed]], a set of common
Rust crates used internally by Facebook. I first wrote about it in
April, in a post where I introduced some projects and goals
for 2021. Since then the scope has expanded and mutated
significantly[fn:1] as I've found the time to do further testing. Our
=shed= is not specific to the Rust programming language, doesn't
provide a public API, and resembles =rust-shed= in name
only[fn:2].

** Usage
Once the binary is installed run =shed init= to bootstrap a
=Config= via CLI prompts or download one remotely. A user
configuration file needs to be available and accessible by the current
user. The default config path is determined by the ~$SHED_CFG~
environment variable or =./cfg.ron= as a fallback.
*** TODO Configuration
This tool can be configured via a single RON or JSON file. The
=Config= object
#+begin_src ron
// cfg.ron
#![enable(implicit_some)]
(
  path: "/home/ellis/.config/shed.ron",
  owner: "ellis",
  src: [],
  network: (
    socket: "127.0.0.1:0",
    transport: "udp",
    tunnel: None,
    engine: None,
    peers: None,
  ),
  hgrc: (
    name: "",
    contact: "",
    description: "",
    extensions: [],
    sock: "0.0.0.0:0",
    paths: {},
  ),
)
#+end_src
*** TODO Commands
- serve :: serve a *Collection* over HTTP[fn:3]
- stash :: add/remove objects in the *stash*
- store :: add/remove objects in the *store*
** Footnotes

[fn:1]  =shed= is not based on a single concrete type like a
=package=, and fully encompasses the =lab= project management tool
initially introduced.

[fn:2] =rlib= on the other hand, is very similar to =rust-shed= and
other crates Facebook has open-sourced such as [[https://github.com/facebookincubator/gazebo][gazebo]].

[fn:3] will support TLS, and eventually migrate to QUIC

